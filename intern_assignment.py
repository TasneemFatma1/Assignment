# -*- coding: utf-8 -*-
"""Intern_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J6uxiJhEPV9V3FaljOB4J0QRD5iT2HJU
"""

!pip install pandas openpyxl

import pandas as pd

file_path = '/content/Data Analyst Intern Assignment - Excel.xlsx'

# Load the Excel file
excel_data = pd.ExcelFile(file_path)

# Check sheet names
print(excel_data.sheet_names)

# Load each sheet into a DataFrame
user_details = excel_data.parse('UserDetails.csv')
cooking_sessions = excel_data.parse('CookingSessions.csv')
order_details = excel_data.parse('OrderDetails.csv')

print("User Details:")
print(user_details.head())
print("\nCooking Sessions:")
print(cooking_sessions.head())
print("\nOrder Details:")
print(order_details.head())

print("User Details Info:")
print(user_details.info())
print("\nCooking Sessions Info:")
print(cooking_sessions.info())
print("\nOrder Details Info:")
print(order_details.info())

# Check for missing values
print("Missing Values in User Details:")
print(user_details.isnull().sum())
print("\nMissing Values in Cooking Sessions:")
print(cooking_sessions.isnull().sum())
print("\nMissing Values in Order Details:")
print(order_details.isnull().sum())

# Example: Fill missing values with default values
user_details['Favorite Meal'].fillna('Unknown', inplace=True)
cooking_sessions['Session Rating'].fillna(cooking_sessions['Session Rating'].mean(), inplace=True)
order_details['Rating'].fillna(order_details['Rating'].mean(), inplace=True)

import matplotlib.pyplot as plt
import seaborn as sns

# Plot the distribution of the Rating column
sns.histplot(order_details['Rating'], kde=True, bins=10)
plt.title('Distribution of Ratings')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

# Fill missing ratings with the median
order_details['Rating'].fillna(order_details['Rating'].median(), inplace=True)

order_details['Rating'] = order_details['Rating'].fillna(order_details['Rating'].median())

print(order_details['Rating'].isnull().sum())  # Should output 0

user_details.columns = user_details.columns.str.strip().str.lower().str.replace(' ', '_')
cooking_sessions.columns = cooking_sessions.columns.str.strip().str.lower().str.replace(' ', '_')
order_details.columns = order_details.columns.str.strip().str.lower().str.replace(' ', '_')

print(user_details.columns)
print(cooking_sessions.columns)
print(order_details.columns)

#merge the columns of cooking_sessions and order_details
merged_data = pd.merge(cooking_sessions, order_details, on='session_id', how='outer')


# Rename columns to have consistent column names
# Drop duplicate columns (such as 'user_id_x' and 'user_id_y')
# Example: Drop 'user_id_y' if 'user_id_x' is sufficient
merged_data = merged_data.loc[:, ~merged_data.columns.str.endswith('_y')]
merged_data.columns = merged_data.columns.str.replace('_x$', '', regex=True)


# Check the final merged data after dropping duplicates

# Verify the columns after renaming
merged_data.head()

# Merge with UserDetails using the consistent 'user_id' column
final_data = pd.merge(merged_data, user_details, on='user_id', how='outer')

final_data.columns

# Calculate the number of orders per session
session_order_count = final_data.groupby('session_id')['order_id'].nunique()
print("Orders per Session:")
print(session_order_count.describe())

correlation = final_data[['session_rating', 'order_id']].dropna().groupby('session_rating')['order_id'].nunique()
print("Correlation between Session Rating and Order Placement:")
print(correlation)

# Find the most ordered dishes
popular_dishes = final_data['dish_name'].value_counts()
print("Most Popular Dishes:")
print(popular_dishes.head())

# Orders by Age Group
orders_by_age = final_data.groupby('age')['order_id'].nunique()
print("Orders by Age Group:")
print(orders_by_age)

# Orders by Location
orders_by_location = final_data.groupby('location')['order_id'].nunique()
print("Orders by Location:")
print(orders_by_location)

import matplotlib.pyplot as plt
import seaborn as sns

# Plot for Orders by Age Group
plt.figure(figsize=(10, 6))
sns.barplot(x=orders_by_age.index, y=orders_by_age.values, palette='viridis')
plt.title('Orders by Age Group', fontsize=14)
plt.xlabel('Age', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Plot for Orders by Location
plt.figure(figsize=(12, 6))
sns.barplot(x=orders_by_location.index, y=orders_by_location.values, palette='coolwarm')
plt.title('Orders by Location', fontsize=14)
plt.xlabel('Location', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Plot popular dishes
plt.figure(figsize=(10, 6))
sns.barplot(x=popular_dishes.head(10).index, y=popular_dishes.head(10).values)
plt.title('Top 10 Popular Dishes')
plt.xlabel('Dish Name')
plt.ylabel('Order Count')
plt.xticks(rotation=45)
plt.show()

# Orders by Favorite Meal
favorite_meal_orders = final_data.groupby('favorite_meal')['order_id'].nunique().sort_values(ascending=False)
plt.figure(figsize=(10, 6))
sns.barplot(x=favorite_meal_orders.values, y=favorite_meal_orders.index, palette='magma')
plt.title('Orders by Favorite Meal', fontsize=14)
plt.xlabel('Number of Orders', fontsize=12)
plt.ylabel('Favorite Meal', fontsize=12)
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.show()

# Average Session Rating by Location
average_rating_by_location = final_data.groupby('location')['session_rating'].mean().sort_values(ascending=False)
plt.figure(figsize=(10, 6))
sns.barplot(x=average_rating_by_location.values, y=average_rating_by_location.index, palette='cool')
plt.title('Average Session Rating by Location', fontsize=14)
plt.xlabel('Average Session Rating', fontsize=12)
plt.ylabel('Location', fontsize=12)
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.show()

import matplotlib.pyplot as plt

# Orders by Meal Type
orders_by_meal_type = final_data.groupby('meal_type')['order_id'].nunique()

# Create a pie chart using Matplotlib
plt.figure(figsize=(8, 8))
plt.pie(
    orders_by_meal_type.values,
    labels=orders_by_meal_type.index,
    autopct='%1.1f%%',
    startangle=90,
    colors=plt.cm.tab10.colors
)
plt.title('Orders by Meal Type', fontsize=14)
plt.axis('equal')  # Ensures the pie is a circle
plt.show()

# Popular Dishes Across Locations
# Grouping data to find popular dishes across locations
dish_location_data = final_data.groupby(['dish_name', 'location'])['order_id'].nunique().reset_index()

# Get the top 10 dishes based on total orders
top_dishes = dish_location_data.groupby('dish_name')['order_id'].sum().nlargest(10).index

# Filter data for the top 10 dishes
filtered_data = dish_location_data[dish_location_data['dish_name'].isin(top_dishes)]

# Create a pivot table to structure the data for heatmap
pivot_table = filtered_data.pivot(index='dish_name', columns='location', values='order_id').fillna(0)

# Plotting the heatmap
plt.figure(figsize=(12, 6))
sns.heatmap(pivot_table, annot=True, cmap='Blues', fmt=".0f")
plt.title('Top Dishes Across Locations', fontsize=14)
plt.xlabel('Location', fontsize=12)
plt.ylabel('Dish Name', fontsize=12)
plt.show()

# 6. Orders by Time of Day
orders_by_time = final_data.groupby('time_of_day')['order_id'].nunique().sort_values(ascending=False)
plt.figure(figsize=(10, 6))
sns.barplot(x=orders_by_time.index, y=orders_by_time.values, palette='autumn')
plt.title('Orders by Time of Day', fontsize=14)
plt.xlabel('Time of Day', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

